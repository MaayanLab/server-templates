import fs from 'fs'
import * as path from 'path'
import { globSync } from 'glob'

const appPath = path.resolve(__dirname, '..', '..', 'app')
const trpcPath = path.resolve(__dirname, '..', '..', 'lib', 'trpc')

const routers = globSync('**/router.ts', { cwd: appPath }).map(file => file.replace(/\.ts$/g, ''))
if (routers.length > 0) {
  // We import routers defined throughout the app directory and merge them into one router
  fs.writeFileSync(
    path.resolve(trpcPath, 'routers', '_app.ts'),
`/* This file was auto-generated by src/lib/trpc/codegen.ts */
import { mergeRouters } from '..';
${routers.map((router, i) => `import router${i} from '@/app/${router}'`).join('\n')}
export const appRouter = mergeRouters(
  ${routers.map((_, i) => `router${i},`).join('\n  ')}
)
export type AppRouter = typeof appRouter;
`)
} else {
  // When there are no routers, we'll just create a blank router to make typescript happy
  fs.writeFileSync(
    path.resolve(trpcPath, 'routers', '_app.ts'),
`/* This file was auto-generated by src/lib/trpc/codegen.ts */
import { router } from '..';
export const appRouter = router({})
export type AppRouter = typeof appRouter;
`)
}
